name: Call reusable workflow - Interface

on:
  workflow_call:
    secrets:
      CODECOV_TOKEN:
        required: true
  push:
    branches:
      - main
  release:
    types: [created]
  pull_request:
    branches:
      - main

jobs:
  call-reusable-workflow-PR:
    uses: bosonprotocol/interface/.github/workflows/ci_reusable.yaml@main
    if: github.event_name == 'pull_request'
    with:
      REACT_APP_CHAIN_ID: '1234'
      DEPLOY_TO_FLEEK: false
      ENV_NAME: 'testing'
      UPDATE_COVERAGE: false
      REACT_APP_ENABLE_CURATION_LISTS: false
    secrets:
      NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
      CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}
  call-reusable-workflow-testing:
    uses: bosonprotocol/interface/.github/workflows/ci_reusable.yaml@main
    if: github.event_name == 'push'
    with:
      REACT_APP_CHAIN_ID: '1234'
      DEPLOY_TO_FLEEK: true
      ENV_NAME: 'testing'
      UPDATE_COVERAGE: true
      REACT_APP_ENABLE_CURATION_LISTS: false
    secrets:
      NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
      FLEEK_API_KEY: ${{ secrets.FLEEK_API_KEY }}
      CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}
  call-reusable-workflow-staging:
    uses: bosonprotocol/interface/.github/workflows/ci_reusable.yaml@main
    if: github.event_name == 'release' && github.event.action == 'created'
    with:
      REACT_APP_CHAIN_ID: '80001'
      DEPLOY_TO_FLEEK: true
      ENV_NAME: 'staging'
      UPDATE_COVERAGE: false
      REACT_APP_ENABLE_CURATION_LISTS: true
      REACT_APP_SELLER_CURATION_LIST: '15'
    secrets:
      NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
      FLEEK_API_KEY: ${{ secrets.FLEEK_API_KEY }}
      CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}
      REACT_APP_INFURA_IPFS_PROJECT_ID: ${{ secrets.REACT_APP_INFURA_IPFS_PROJECT_ID }}
      REACT_APP_INFURA_IPFS_PROJECT_SECRET: ${{ secrets.REACT_APP_INFURA_IPFS_PROJECT_SECRET }}

  job-sumary:
    name: Create Job Summary
    runs-on: ubuntu-latest
    if: ${{ always() && contains(join(needs.*.result, ','), 'success') }}
    needs: [call-reusable-workflow-PR, call-reusable-workflow-testing, call-reusable-workflow-staging]
    steps:
      - uses: actions/checkout@v3
      - name: Install JQ
        uses: sergeysova/jq-action@v2
        with:
          cmd: jq -n env
      - name: Get job outputs
        env:
          OUTPUTS: ${{ toJSON(needs) }}
        run: |
          succededJobOutput="$(
            echo '${{ env.OUTPUTS }}' | jq '.[] | select(.result | startswith("success")) | .outputs'
          )"
          echo 'JOB_OUTPUT='$succededJobOutput >> $GITHUB_ENV
      - name: Get job vars
        run: |
          jobLint="$(
            echo '${{ env.JOB_OUTPUT }}' |
            jq '.JOB_LINT'
          )"
          echo 'JOB_LINT='$jobLint >> $GITHUB_ENV

          jobBuild="$(
            echo '${{ env.JOB_OUTPUT }}' |
            jq '.JOB_BUILD'
          )"
          echo 'JOB_BUILD='$jobBuild >> $GITHUB_ENV

          deployUrl="$(
            echo '${{ env.JOB_OUTPUT }}' |
            jq '.DEPLOY_URL'
          )"
          echo 'DEPLOY_URL='$deployUrl >> $GITHUB_ENV

      - name: Adding Job Summary
        run: |
          echo "| Command | Status |" >> $GITHUB_STEP_SUMMARY
          echo "| ---- | ---- |" >> $GITHUB_STEP_SUMMARY
          if [ ${{ env.JOB_LINT }} == success ]; then
            echo "| Lint | ✅ |" >> $GITHUB_STEP_SUMMARY
          else
            echo "| Lint | ❌ |" >> $GITHUB_STEP_SUMMARY
          fi
          if [ ${{ env.JOB_BUILD }} == success ]; then
            echo "| Build | ✅ |" >> $GITHUB_STEP_SUMMARY
          else
            echo "| Build | ❌ |" >> $GITHUB_STEP_SUMMARY
          fi
      - name: Adding Job Summary Deploy Url
        if: ${{ env.DEPLOY_URL }}
        run: echo "| URL | ${{ env.DEPLOY_URL }} |" >> $GITHUB_STEP_SUMMARY
