name: Build, Test and Deploy the Marketplace Interface - Reusable workflow

on:
  workflow_call:
    inputs:
      REACT_APP_ENV_NAME:
        required: true
        type: string
      DEPLOY_TO_FLEEK:
        required: true
        type: boolean
      IS_PREVIEW:
        required: true
        type: boolean
      UPDATE_COVERAGE:
        required: true
        type: boolean
      ENV_NAME:
        required: true
        type: string
      REACT_APP_ENABLE_CURATION_LISTS:
        required: true
        type: boolean
      REACT_APP_SELLER_BLACKLIST_URL:
        required: false
        type: string
      REACT_APP_OFFER_CURATION_LIST:
        required: false
        type: string
      REACT_APP_IPFS_GATEWAY:
        required: true
        type: string
      REACT_APP_IPFS_IMAGE_GATEWAY:
        required: false
        type: string
      REACT_APP_RELEASE_TAG:
        required: false
        type: string
      REACT_APP_RELEASE_NAME:
        required: false
        type: string
      REACT_APP_DAPP_VIEW_MODE:
        required: true
        type: string
      REACT_APP_DR_CENTER_VIEW_MODE:
        required: true
        type: string
      REACT_APP_WIDGETS_URL:
        required: true
        type: string
      REACT_APP_UNISWAP_API_URL:
        required: true
        type: string
      REACT_APP_AWS_API_ENDPOINT:
        required: true
        type: string
      REACT_APP_MOONPAY_API:
        required: true
        type: string
      REACT_APP_MOONPAY_LINK:
        required: true
        type: string
      REACT_APP_MOONPAY_EXTERNAL_LINK:
        required: true
        type: string
    secrets:
      NPM_TOKEN:
        required: true
      FLEEK_API_KEY:
        required: false
      CODECOV_TOKEN:
        required: true
      REACT_APP_INFURA_IPFS_PROJECT_ID:
        required: false
      REACT_APP_INFURA_IPFS_PROJECT_SECRET:
        required: false
      REACT_APP_RNFT_LICENSE_TEMPLATE:
        required: true
      REACT_APP_BUYER_SELLER_AGREEMENT_TEMPLATE:
        required: true
      REACT_APP_DEFAULT_DISPUTE_RESOLVER_ID:
        required: true
      REACT_APP_DEFAULT_RESOLUTION_PERIOD_DAYS:
        required: true
      REACT_APP_GOOGLE_TAG_ID:
        required: false
      REACT_APP_META_TX_API_KEY:
        required: true
      REACT_APP_META_TX_API_IDS:
        required: true
      REACT_APP_WALLET_CONNECT_PROJECT_ID:
        required: true
      REACT_APP_CAROUSEL_PROMOTED_SELLER_ID_MAP:
        required: true
      REACT_APP_FAIR_EXCHANGE_POLICY_RULES:
        required: true
      REACT_APP_INFURA_KEY:
        required: true
      REACT_APP_MOONPAY_API_KEY:
        required: true
    outputs:
      JOB_LINT:
        value: ${{ jobs.build-test-deploy.outputs.jobLint }}
      JOB_BUILD:
        value: ${{ jobs.build-test-deploy.outputs.jobBuild }}
      JOB_COVERAGE:
        value: ${{ jobs.build-test-deploy.outputs.jobCoverage }}
      DEPLOY_URL:
        value: ${{ jobs.build-test-deploy.outputs.deployUrl }}

jobs:
  build-test-deploy:
    name: Build, Test and Deploy the Marketplace Interface
    runs-on: ubuntu-latest
    env:
      REACT_APP_ENV_NAME: ${{ inputs.REACT_APP_ENV_NAME }}
      NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
      REACT_APP_ENABLE_CURATION_LISTS: ${{ inputs.REACT_APP_ENABLE_CURATION_LISTS }}
      REACT_APP_SELLER_BLACKLIST_URL: ${{ inputs.REACT_APP_SELLER_BLACKLIST_URL }}
      REACT_APP_OFFER_CURATION_LIST: ${{ inputs.REACT_APP_OFFER_CURATION_LIST }}
      REACT_APP_IPFS_GATEWAY: ${{ inputs.REACT_APP_IPFS_GATEWAY }}
      REACT_APP_IPFS_IMAGE_GATEWAY: ${{ inputs.REACT_APP_IPFS_IMAGE_GATEWAY }}
      REACT_APP_RNFT_LICENSE_TEMPLATE: ${{ secrets.REACT_APP_RNFT_LICENSE_TEMPLATE }}
      REACT_APP_BUYER_SELLER_AGREEMENT_TEMPLATE: ${{ secrets.REACT_APP_BUYER_SELLER_AGREEMENT_TEMPLATE }}
      REACT_APP_DEFAULT_DISPUTE_RESOLVER_ID: ${{ secrets.REACT_APP_DEFAULT_DISPUTE_RESOLVER_ID }}
      REACT_APP_DEFAULT_RESOLUTION_PERIOD_DAYS: ${{ secrets.REACT_APP_DEFAULT_RESOLUTION_PERIOD_DAYS }}
      REACT_APP_INFURA_IPFS_PROJECT_ID: ${{ secrets.REACT_APP_INFURA_IPFS_PROJECT_ID }}
      REACT_APP_INFURA_IPFS_PROJECT_SECRET: ${{ secrets.REACT_APP_INFURA_IPFS_PROJECT_SECRET }}
      REACT_APP_CAROUSEL_PROMOTED_SELLER_ID_MAP: ${{ secrets.REACT_APP_CAROUSEL_PROMOTED_SELLER_ID_MAP }}
      REACT_APP_GOOGLE_TAG_ID: ${{ secrets.REACT_APP_GOOGLE_TAG_ID }}
      REACT_APP_META_TX_API_KEY: ${{ secrets.REACT_APP_META_TX_API_KEY }}
      REACT_APP_META_TX_API_IDS: ${{ secrets.REACT_APP_META_TX_API_IDS }}
      REACT_APP_WALLET_CONNECT_PROJECT_ID: ${{ secrets.REACT_APP_WALLET_CONNECT_PROJECT_ID }}
      REACT_APP_FAIR_EXCHANGE_POLICY_RULES: ${{ secrets.REACT_APP_FAIR_EXCHANGE_POLICY_RULES }}
      REACT_APP_RELEASE_TAG: ${{ inputs.REACT_APP_RELEASE_TAG }}
      REACT_APP_RELEASE_NAME: ${{ inputs.REACT_APP_RELEASE_NAME }}
      REACT_APP_VIEW_MODE: "dapp"
      REACT_APP_DAPP_VIEW_MODE: ${{ inputs.REACT_APP_DAPP_VIEW_MODE }}
      REACT_APP_DR_CENTER_VIEW_MODE: ${{ inputs.REACT_APP_DR_CENTER_VIEW_MODE }}
      REACT_APP_WIDGETS_URL: ${{ inputs.REACT_APP_WIDGETS_URL }}
      REACT_APP_UNISWAP_API_URL: ${{ inputs.REACT_APP_UNISWAP_API_URL }}
      REACT_APP_AWS_API_ENDPOINT: ${{ inputs.REACT_APP_AWS_API_ENDPOINT }}
      REACT_APP_MOONPAY_API: ${{ inputs.REACT_APP_MOONPAY_API }}
      REACT_APP_MOONPAY_LINK: ${{ inputs.REACT_APP_MOONPAY_LINK }}
      REACT_APP_INFURA_KEY: ${{ secrets.REACT_APP_INFURA_KEY }}
      REACT_APP_MOONPAY_API_KEY: ${{ secrets.REACT_APP_MOONPAY_API_KEY }}
      REACT_APP_MOONPAY_EXTERNAL_LINK: ${{ inputs.REACT_APP_MOONPAY_EXTERNAL_LINK }}
    outputs:
      jobLint: ${{ steps.lint.outputs.pass }}
      jobBuild: ${{ steps.build.outputs.pass }}
      jobCoverage: ${{ steps.coverage.outputs.pass }}
      deployUrl: ${{ steps.deploy.outputs.deployUrl }}
    steps:
      - uses: actions/checkout@v3
        with:
          ref: ${{ github.event.pull_request.head.ref }}
          fetch-depth: 0
      - uses: actions/setup-node@v3
        with:
          node-version: "17"
          registry-url: "https://registry.npmjs.org"
          cache: "npm"
      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: ~/.npm
          key: npm-${{ hashFiles('package-lock.json') }}
          restore-keys: npm-
      - run: npm ci
      - name: Install Playwright Browsers
        run: npx playwright install --with-deps chromium
      - run: npm run prettier
      - run: npm run lint
      - id: lint
        run: echo "::set-output name=pass::success"
      - run: npm run build
      - id: build
        run: echo "::set-output name=pass::success"
      - name: Run Tests & Generate coverage reports
        run: npm run coverage:report
      - name: Upload Unit Coverage to Codecov
        if: ${{ inputs.UPDATE_COVERAGE }}
        uses: codecov/codecov-action@v2
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: ./coverage/coverage-final.json
          flags: unittests
      - name: Upload E2E Coverage to Codecov
        if: ${{ inputs.UPDATE_COVERAGE }}
        uses: codecov/codecov-action@v2
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: ./test-results.json
          flags: e2etests
      - name: (if 'staging' env) Copy contents from .fleek_staging.json to .fleek.json
        if: ${{ inputs.ENV_NAME == 'staging' }}
        run: mv .fleek_staging.json .fleek.json
      - name: (if 'production' env) Copy contents from .fleek_production.json to .fleek.json
        if: ${{ inputs.ENV_NAME == 'production' }}
        run: mv .fleek_production.json .fleek.json
      - uses: actions/upload-artifact@v3
        if: always()
        with:
          name: playwright-report
          path: playwright-report/
      - name: Deploy via fleek
        if: ${{ inputs.DEPLOY_TO_FLEEK }}
        id: Deploy
        run: npx @fleekhq/fleek-cli site:deploy
        env:
          FLEEK_API_KEY: ${{ secrets.FLEEK_API_KEY }}
      - name: Build dapp to show the dr_center only
        run: npm run build
        if: ${{ inputs.IS_PREVIEW == false && inputs.DEPLOY_TO_FLEEK }}
        env:
          REACT_APP_VIEW_MODE: "dr_center"
      - name: (if DR Center 'testing' env) Copy contents from .fleek_dr_center_testing.json to .fleek.json
        if: ${{ inputs.ENV_NAME == 'testing' }}
        run: mv .fleek_dr_center_testing.json .fleek.json
      - name: (if DR Center 'staging' env) Copy contents from .fleek_dr_center_staging.json to .fleek.json
        if: ${{ inputs.ENV_NAME == 'staging' }}
        run: mv .fleek_dr_center_staging.json .fleek.json
      - name: (if DR Center 'production' env) Copy contents from .fleek_dr_center_production.json to .fleek.json
        if: ${{ inputs.ENV_NAME == 'production' }}
        run: mv .fleek_dr_center_production.json .fleek.json
      - uses: actions/upload-artifact@v3
        if: always()
        with:
          name: playwright-report
          path: playwright-report/
      - name: Deploy via fleek
        if: ${{ inputs.DEPLOY_TO_FLEEK }}
        id: deploy_dr_center
        run: npx @fleekhq/fleek-cli site:deploy
        env:
          FLEEK_API_KEY: ${{ secrets.FLEEK_API_KEY }}
